from dotenv import load_dotenv
load_dotenv()
from keyboard import course_buttons,home_buttons, converter_buttons, converted_euro, converted_dollar, converted_rub
from aiogram import Dispatcher,executor,Bot, types
from aiogram.dispatcher.filters.builtin import CommandStart
import os
from course import get



TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(CommandStart())
async def start(message):
    await bot.send_message(message.from_user.id,"kerakli valyuta kursini tanlang", reply_markup = home_buttons)

@dp.message_handler(text="currencies💸")
async def start(message):
    await bot.send_message(message.from_user.id,"kerakli valyuta kursini tanlang", reply_markup = course_buttons)


@dp.message_handler(text="dollar kursi 🇺🇸")
async def dollar_info(message):
    course = get()
    print()
    print(message)
    print()
    if message.text== "dollar kursi 🇺🇸":
        await bot.send_message(message.from_user.id,f"Dollar kursi: \n {course[0]['Rate']} \n Sana:{course[0]['Date']}" )
@dp.message_handler(text="rubl kursi 🇷🇺")
async def dollar_info(message):
    course = get()
    print()
    print(message)
    print()
    if message.text== "rubl kursi 🇷🇺":
        await bot.send_message(message.from_user.id,f"rubl kursi: \n {course[2]['Rate']} \n Sana:{course[2]['Date']}")
@dp.message_handler(text="euro kursi🇪🇺")
async def dollar_info(message):
    course = get()
    print()
    print(message)
    print()
    if message.text== "euro kursi🇪🇺":
        await bot.send_message(message.from_user.id,f"Euro kursi: \n {course[1]['Rate']} \n Sana:{course[1]['Date']}")

@dp.message_handler(text="back⏪")
async def start(message):
    print()
    print(message)
    print()
    await bot.send_message(message.from_user.id,"kerakli valyuta kursini tanlang", reply_markup = home_buttons)

@dp.message_handler(text="converter⚖️")
async def start(message):
    await bot.send_message(message.from_user.id,"convert qilmoqchi bo'lgan valyutangizni tanlang:", reply_markup = converter_buttons)

@dp.message_handler(text="convert euro🇪🇺")
async def converting_info(message: types.Message):
    course = get()
    print()
    print(message)
    print()
    if message.text == "convert euro🇪🇺":
        await bot.send_message(message.from_user.id, f"Euro kursi: 1 euro = {course[1]['Rate']}\nSana:{course[1]['Date']}")
        await bot.send_message(message.from_user.id, "Xisoblamoqchi bo'lgan Euro miqdorini yozing", reply_markup=converted_euro)
        






@dp.message_handler(text="convert dollar🇺🇸")
async def converting_dollar(message: types.Message):
    course = get()
    print()
    print(message)
    print()
    if message.text == "convert dollar🇺🇸":
        await bot.send_message(message.from_user.id, f"Dollar kursi: 1 dollar = {course[0]['Rate']}\nSana:{course[0]['Date']}")
        await bot.send_message(message.from_user.id, "Xisoblamoqchi bo'lgan Dollar miqdorini yozing", reply_markup=converted_dollar)
        
@dp.message_handler(text="convert rubl🇷🇺")
async def converting_info(message: types.Message):
    course = get()
    print()
    print(message)
    print()
    if message.text =   = "convert rubl🇷🇺":
        await bot.send_message(message.from_user.id, f"Rubl kursi: 1 euro = {course[2]['Rate']}\nSana:{course[2]['Date']}")
        await bot.send_message(message.from_user.id, "Xisoblamoqchi bo'lgan Rubl miqdorini yozing", reply_markup=converted_rub)
        


@dp.message_handler(text="Rub🇷🇺 ➡️ Uzs🇺🇿")
async def converting_info(message: types.Message):
    course = get()
    print()
    print(message)
    print()
    if message.text == "Rub🇷🇺 ➡️ Uzs🇺🇿":
        await bot.send_message(message.from_user.id, int({course[2]['Rate']}))
        await bot.send_message(message.from_user.id, "Xisoblamoqchi bo'lgan Rubl miqdorini yozing", reply_markup=converted_rub)





















# @dp.message_handler()
# async def info(message):
#     print()
#     print(message)
#     print()
#     await bot.send_message(message.from_user.id,"iltimos kerakli valyutani tanglang(boshqa xech nima yozmang!)")






executor.start_polling(dp, skip_updates=True)
